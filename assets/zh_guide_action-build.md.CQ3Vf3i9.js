import{_ as t,c as a,o as i,ah as o}from"./chunks/framework.Bhsyh9kO.js";const m=JSON.parse('{"title":"Action 构建","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/action-build.md","filePath":"zh/guide/action-build.md"}'),r={name:"zh/guide/action-build.md"};function l(c,e,n,s,d,p){return i(),a("div",null,[...e[0]||(e[0]=[o('<h1 id="action-构建" tabindex="-1">Action 构建 <a class="header-anchor" href="#action-构建" aria-label="Permalink to “Action 构建”">​</a></h1><p>Action 构建指的是直接使用 GitHub Action 进行编译。</p><p>如果你不想自行编译，可以从本项目现有的 Action 下载 Artifact，也可以从自托管的服务器下载：<a href="https://dl.static-php.dev/static-php-cli/common/" target="_blank" rel="noreferrer">进入</a></p><blockquote><p>自托管的二进制也是由 Action 构建而来，<a href="https://github.com/static-php/static-php-cli-hosted" target="_blank" rel="noreferrer">项目仓库地址</a>。 包含的扩展有：bcmath,bz2,calendar,ctype,curl,dom,exif,fileinfo,filter,ftp,gd,gmp,iconv,xml,mbstring,mbregex,mysqlnd,openssl,pcntl,pdo,pdo_mysql,pdo_sqlite,phar,posix,redis,session,simplexml,soap,sockets,sqlite3,tokenizer,xmlwriter,xmlreader,zlib,zip</p></blockquote><h2 id="构建方法" tabindex="-1">构建方法 <a class="header-anchor" href="#构建方法" aria-label="Permalink to “构建方法”">​</a></h2><p>使用 GitHub Action 可以方便地构建一个静态编译的 PHP 和 phpmicro，同时可以自行定义要编译的扩展。</p><ol><li>Fork 本项目。</li><li>进入项目的 Actions，选择 CI 开头的 Workflow（根据你需要的操作系统选择）。</li><li>选择 <code>Run workflow</code>，填入你要编译的 PHP 版本、目标类型、扩展列表。（扩展列表使用英文逗号分割，例如 <code>bcmath,curl,mbstring</code>）</li><li>等待大约一段时间后，进入对应的任务中，获取 <code>Artifacts</code>。</li></ol><p>如果你选择了 <code>debug</code>，则会在构建时输出所有日志，包括编译的日志，以供排查错误。</p><blockquote><p>如果你需要在其他环境构建，可以使用 <a href="./manual-build.html">手动构建</a>。</p></blockquote><h2 id="扩展选择" tabindex="-1">扩展选择 <a class="header-anchor" href="#扩展选择" aria-label="Permalink to “扩展选择”">​</a></h2><p>你可以到 <a href="./extensions.html">扩展列表</a> 中查看目前你需要的扩展是否均支持， 然后到 <a href="./cli-generator.html">在线命令生成</a> 中选择你需要编译的扩展，复制扩展字符串到 Action 的 <code>extensions</code> 中，编译即可。</p>',11)])])}const b=t(r,[["render",l]]);export{m as __pageData,b as default};
